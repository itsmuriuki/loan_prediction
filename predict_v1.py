import pickle

model_file = 'model_Credit.bin'

with open (model_file, 'rb') as f_in:
    dv, model = pickle.load(f_in)


customer = {'AppliedLoanAmount': 1600,
 'InterestAmount': 352,
 'NegotiatedRecoveryRate': 0,
 'PrincipalArrears': 0,
 'InterestArrears': 0,
 'NegotiatedInstallments': 4,
 'DisbursedAmount': 1600,
 'DisbursementMethod': 1,
 'InterestRateChargeType': 1,
 'InterestRateValue': 5,
 'PaymentFrequency': 0,
 'AcceptPrepayment': 1,
 'PrincipalRecoveryMethod': 0,
 'GracePeriod': 0,
 'MinimumTerm': 1,
 'MaximumTerm': 1,
 'TermType': 2,
 'Type': 1,
 'RequestSource': 1,
 'ClusteredId': 3867,
 'WriteOffStatus': 0,
 'IsLoanCaseAWriteOff': 0,
 'PenaltyAmount': 0,
 'RollOverFee': 0,
 'IsRollOver': 0,
 'NumberOfTimesRolled': 0,
 'RolledOverAmount': 0,
 'PrequalifiedAmount': 2500,
 'ScoreOutput_MobiLoansScore': 644,
 'ScoreOutput_Probability': 15,
 'ScoreOutput_Grade': 2,
 'Account_FullSettledCount': 0,
 'Account_ActiveCount': 0,
 'Account_ClosedAccount': 0,
 'LengthOfCreditHistoryInMonths_MySector': 12,
 'LengthOfCreditHistoryInMonths_OtherSector': 23,
 'CountOfNonPerformingAccounts_MySector': 0,
 'CountOfNonPerformingAccounts_OtherSector': 0,
 'CountOfNonPerformingClosedAccounts_MySector': 0,
 'CountOfNonPerformingClosedAccounts_OtherSector': 0,
 'CountOfOpenNonPerformingAccounts_MySector': 0,
 'CountOfOpenNonPerformingAccounts_OtherSector': 0,
 'CountofPerformingAccounts_MySector': 2,
 'CountofPerformingAccounts_OtherSector': 16,
 'CountofClosedPerformingAccounts_MySector': 1,
 'CountofClosedPerformingAccounts_OtherSector': 14,
 'CountofOpenPerformingAccounts_MySector': 1,
 'CountofOpenPerformingAccounts_OtherSector': 2,
 'CountofPerformingAccountsDefaultHistory_MySector': 0,
 'CountofPerformingAccountsDefaultHistory_OtherSector': 0,
 'CountofOpenPerformingAccountswithDefaultHistory_MySector': 0,
 'CountofOpenPerformingAccountswithDefaultHistory_OtherSector': 0,
 'CountofClosedPerformingAccountswithDefaultHistory_MySector': 0,
 'CountofClosedPerformingAccountswithDefaultHistory_OtherSector': 0,
 'CountofMobileLoanAccounts_MySector': 8,
 'CountofMobileLoanAccounts_OtherSector': 0,
 'CountofOpenPerformingMobileLoanAccounts_MySector': 1,
 'CountofOpenPerformingMobileLoanAccounts_OtherSector': 0,
 'CountofClosedPerformingMobileLoanAccounts_MySector': 7,
 'CountofClosedPerformingMobileLoanAccounts_OtherSector': 0,
 'CountofOpenNonPerformingMobileLoanAccounts_MySector': 0,
 'CountofOpenNonPerformingMobileLoanAccounts_OtherSector': 0,
 'CountofClosedNonPerformingMobileLoanAccounts_MySector': 0,
 'CountofClosedNonPerformingMobileLoanAccounts_OtherSector': 0,
 'CountofOpenPerformingMobileLoanAccountswithDefaultHistory_MySector': 0,
 'CountofOpenPerformingMobileLoanAccountswithDefaultHistory_OtherSector': 0,
 'CountofClosedPerformingMobileLoanAccountswithDefaultHistory_MySector': 0,
 'CountofClosedPerformingMobileLoanAccountswithDefaultHistory_OtherSector': 0,
 'MinimumMobileLoanPrincipalAmount_MySector': 12000,
 'MinimumMobileLoanPrincipalAmount_OtherSector': 2600,
 'MaximumMobileLoanPrincipalAmount_MySector': 12000,
 'MaximumMobileLoanPrincipalAmount_OtherSector': 20200,
 'AverageMobileLoanPrincipalAmount_MySector': 12000,
 'AverageMobileLoanPrincipalAmount_OtherSector': 11437,
 'LastMobileLoanPrincipalAmount_MySector': 12000,
 'LastMobileLoanPrincipalAmount_OtherSector': 19200,
 'CustomerAge': 41,
 'PersoanlProfile_Age': 42}

X = dv.transform([customer])
y_pred  = model.predict_proba(X)[0, 1]

print('input', customer)
print('Default probability', y_pred)